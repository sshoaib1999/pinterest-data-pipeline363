# pyspark functions
from pyspark.sql.functions import *
# URL processing
import urllib

# Specify file type to be csv
file_type = "csv"
# Indicates file has first row as the header
first_row_is_header = "true"
# Indicates file has comma as the delimeter
delimiter = ","
# Read the CSV file to spark dataframe
aws_keys_df = spark.read.format(file_type)\
.option("header", first_row_is_header)\
.option("sep", delimiter)\
.load("/FileStore/tables/authentication_credentials.csv")

# Get the AWS access key and secret key from the spark dataframe
ACCESS_KEY = aws_keys_df.where(col('User name')=='syed shoaib').select('Access key ID').collect()[0]['Access key ID']
SECRET_KEY = aws_keys_df.where(col('User name')=='syed shoaib').select('Secret access key').collect()[0]['Secret access key']
# Encode the secrete key
ENCODED_SECRET_KEY = urllib.parse.quote(string=SECRET_KEY, safe="")

# AWS S3 bucket name
AWS_S3_BUCKET = "user-0e09f2683831-bucket"
# Mount name for the bucket
MOUNT_NAME = "/mnt/Pinterest Data Engineering Project"
# Source url
SOURCE_URL = "s3n://{0}:{1}@{2}".format(ACCESS_KEY, ENCODED_SECRET_KEY, AWS_S3_BUCKET)
# Mount the drive
dbutils.fs.mount(SOURCE_URL, MOUNT_NAME)

# Paths to JSON files
pin_path = MOUNT_NAME + "/topics/<0e09f2683831>.pin/partition=0/*.json"  
geo_path = MOUNT_NAME + "/topics/<0e09f2683831>.geo/partition=0/*.json"
user_path = MOUNT_NAME + "/topics/<0e09f2683831>.users/partition=0/*.json"

# Read JSON files into DataFrames
df_pin = spark.read.json(pin_path)
df_geo = spark.read.json(geo_path) 
df_user = spark.read.json(user_path)
